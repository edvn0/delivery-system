project.ext.jvmFlags = []
project.ext.userClasspath = []

// Whether to enable experimental AppCDS caching
project.ext.appCDS = false

project.ext.sshPrint = { delegate, command ->
    delegate.execute("echo ' --- Running command: \"" + command.replaceAll(project.brickPassword, "********") + "\" ---'")
    delegate.execute(command)
}

// Directory paths
project.ext.externalJarsPath = "/home/robot/java/libraries"
project.ext.userJarsPath = "/home/robot/java/programs"
project.ext.userWrappersPath = "/home/robot"
project.ext.splashPath = "/home/robot/java/splash.txt"
project.ext.appcdsPath = "/home/robot/java/appcds"
project.ext.appcdsLstPath = { return "/home/robot/java/appcds/all.lst" }
project.ext.appcdsJsaPath = { return "/home/robot/java/appcds/${rootProject.name}-${version}.jsa" }
project.ext.opencvJar = "/usr/share/java/opencv.jar"
project.ext.rxtxJar = "/usr/share/java/RXTXcomm.jar"
project.ext.userJarPath = {
    def suffix = project.slimJar ? "" : "-all";
    return "${project.userJarsPath}/${rootProject.name}-${version}${suffix}.jar";
}
project.ext.userWrapperPath = {
    def suffix = project.slimJar ? "" : "-all";
    return "${project.userWrappersPath}/${rootProject.name}-${version}${suffix}.sh";
}

////////////////////////
// Create a Basic task
// normal arguments:
//  - grpName: command group name
//  - name:    task name
//  - command: command to be executed
//  - desc:    optional task description
project.ext.createCommandTask = { grpName, name, command, desc = "" ->
    task "$name" {
        group "$grpName"
        description "$desc"
        doLast {
            ssh.run {
                session(remotes.ev3dev) {
                    project.sshPrint(delegate, "$command")
                }
            }
        }
    }
}

//////////////////////////////////
// Create a Basic task with Sudo
// normal arguments:
//  - grpName: command group name
//  - name:    task name
//  - command: command to be executed
//  - desc:    optional task description
project.ext.createSudoCommandTask = { grpName, name, command, desc = "" ->
    project.createCommandTask(grpName, name, "echo -e \"${project.brickPassword}\" | sudo -S $command", desc)
}

//////////////////////////////////////////
// Modify classpath URL for given target
// - forJar - true  -> set up for MANIFEST.MF
//          - false -> set up for -cp option
// - url - class path entry to modify
project.ext.filterClassURL = { forJar, url ->
    if (forJar) {
        return url
    } else {
        return url.replaceAll("^file://", "")
    }
}

/////////////////////////////
// Determine JAR class-path
// - forJar - true  -> set up for MANIFEST.MF
//          - false -> set up for -cp option
project.ext.getClassPath = { forJar ->
    def jarList = []

    if (project.slimJar) {
        configurations.runtime.each {
            if (forJar) {
                jarList += "file://${ project.externalJarsPath }/${ it.name }"
            } else {
                jarList += "${ project.externalJarsPath }/${ it.name }"
            }
        }
    }

    if (project.ext.has("opencv") && project.ext.opencv) {
        jarList += filterClassURL(forJar, "file://${project.opencvJar}")
    }

    if (project.ext.has("rxtx") && project.ext.rxtx) {
        jarList += filterClassURL(forJar, "file://${project.rxtxJar}")
    }

    if (project.ext.has("userClasspath")) {
        jarList += project.ext.userClasspath.collect { filterClassURL(forJar, it) }
    }

    if (forJar) {
        return jarList.join(" ")
    } else {
        jarList += userJarPath()
        return jarList.join(":")
    }
}

ssh.settings {
    knownHosts = allowAnyHosts
}

remotes {
    ev3dev {
        host = project.brickHost
        user = project.brickUser
        password = project.brickPassword
    }
}

def baseGroup = "ELJ-Deployment"

//////////////////
// TASK HELPERS //
//////////////////

////////////////////////////////////////
// Get command line for java execution
def getJavaCommand(wrapper) {
    def javaArr = ["java"]
    javaArr += jvmFlags

    if (project.appCDS) {
        javaArr += "-XX:+UnlockDiagnosticVMOptions"
        javaArr += "-XX:+UseAppCDS"
        javaArr += "-XX:SharedArchiveFile=${project.appcdsJsaPath()}"
    }
    if (project.useEmbeddedPaths) {
        javaArr += "-jar ${project.userJarPath()}"
    } else {
        javaArr += "-cp \"${project.getClassPath(false)}\""
        javaArr += "${project.mainClass}"
    }

    def prefixArr = []
    if (!wrapper) {
        if (project.useTime) {
            prefixArr += "time"
        }
        if (project.useBrickrun) {
            prefixArr += "brickrun --"
        }
    }

    if (project.useSudo) {
        def javaCmd = javaArr.join(" ")
        def shLine = ("echo \"${project.brickPassword}\" | sudo -S $javaCmd").replaceAll("\"","\\\\\"")
        return (prefixArr + "/bin/sh -c \"$shLine\"").join(" ")
    } else {
        return (prefixArr + javaArr).join(" ")
    }
}

/////////////
// GENERAL //
/////////////

project.createCommandTask(baseGroup, "testConnection", "ls", "Test connection to the brick.")
project.createCommandTask(baseGroup, "pkillJava", "pkill java", "Kill running Java instances.")
project.createCommandTask(baseGroup, "undeploy",
    "rm -f ${project.userJarPath()} ${project.userWrapperPath()} ${project.appcdsJsaPath()}",
    "Remove previously uploaded JAR.")

///////////
// TASKS //
///////////

task fatJar {
    group baseGroup
    description "Build a fat JAR with all dependencies included inside"
    dependsOn shadowJar
    doLast {}
}

task templateWrapper(type: Copy) {
    from "${project.rootDir}/gradle/"
    into "${project.rootDir}/build/"
    include 'launcher-simple.sh.template'
    rename { file -> 'launcher.sh' }

    expand(command: getJavaCommand(true), splash: project.splashPath)
}

task run {
    group baseGroup
    description "Run the program that is currently loaded on the brick."
    doLast {
        ssh.run {
            session(remotes.ev3dev) {
                project.sshPrint(delegate, "${getJavaCommand(false)}")
            }
        }
    }
}

task deploy {
    group baseGroup
    description "Deploy a new build of the program to the brick."
    dependsOn clean
    dependsOn templateWrapper
    dependsOn project.slimJar ? "jar" : "fatJar"
    doLast {
        def wrapperPath = project.userWrapperPath()
        def jarName = project.slimJar ? "${rootProject.name}-${version}.jar" : "${rootProject.name}-${version}-all.jar"

        ssh.run {
            session(remotes.ev3dev) {
                println "Uploading $jarName"
                project.sshPrint(delegate, "mkdir -p ${project.userJarsPath}/")
                put from: "${project.rootDir}/build/libs/$jarName", into: "${project.userJarsPath}"
                put from: "${project.rootDir}/build/launcher.sh", into: "$wrapperPath"
                put from: "${project.rootDir}/gradle/splash.txt", into: project.splashPath
                project.sshPrint(delegate, "chmod +x \"$wrapperPath\"")
            }
        }
    }
}

task deployRun {
    group baseGroup
    description "Deploy a new build of the program to the brick and then run it."
    dependsOn deploy, run
    doLast {}
}

if (project.appCDS) {
    task deployAppCDS {
        group baseGroup
        description "Deploys the program and performs AppCDS class data dump."
        dependsOn deploy
        doLast {
            ssh.run {
                session(remotes.ev3dev) {
                    project.sshPrint(delegate, "java \
                                            -cp \"${project.getClassPath(false)}\" \
                                            -XX:+UnlockDiagnosticVMOptions -XX:+UseAppCDS \
                                            -Xshare:dump \
                                            -XX:SharedClassListFile=${project.appcdsLstPath()} \
                                            -XX:SharedArchiveFile=${project.appcdsJsaPath()}")
                }
            }
        }
    }
}

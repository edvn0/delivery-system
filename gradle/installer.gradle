ssh.settings {
    knownHosts = allowAnyHosts
}

def installerGroup = "ELJ-Installer"

task getInstaller {
    group installerGroup
    description "Download component installer on the brick."
    doLast {
        ssh.run {
            session(remotes.ev3dev) {
                project.sshPrint(delegate, "mkdir -p /home/robot/java")
                project.sshPrint(delegate, "/bin/sh -c \"if grep -i jessie /etc/os-release; then wget https://raw.githubusercontent.com/ev3dev-lang-java/installer/master/installer-jessie.sh -O /home/robot/java/installer.sh; else wget https://raw.githubusercontent.com/ev3dev-lang-java/installer/master/installer.sh -O /home/robot/java/installer.sh; fi\"")
                project.sshPrint(delegate, "chmod +x /home/robot/java/installer.sh")
            }
        }
    }
}

if (project.appCDS) {
    project.createSudoCommandTask(installerGroup, "dumpAppCDS_ClassList",
        "/home/robot/java/installer.sh appcds",
        "Dump class list for AppCDS from installed libraries.")
}

project.createSudoCommandTask(installerGroup, "updateAPT",
    "/home/robot/java/installer.sh update",
    "Update APT repositories.")

project.createCommandTask(installerGroup, "helpInstall",
    "/home/robot/java/installer.sh help",
    "Print the installer help.")

project.createSudoCommandTask(installerGroup, "installJava",
    "/home/robot/java/installer.sh java",
    "Install Java on the brick.")

project.createSudoCommandTask(installerGroup, "installOpenCV",
    "/home/robot/java/installer.sh opencv",
    "Install OpenCV libraries on the brick.")

project.createSudoCommandTask(installerGroup, "installRXTX",
    "/home/robot/java/installer.sh rxtx",
    "Install RXTX library on the brick.")

project.createSudoCommandTask(installerGroup, "installJavaLibraries",
    "/home/robot/java/installer.sh javaLibs",
    "Install Java libraries on the brick.")

project.createCommandTask(installerGroup, "javaVersion",
    "java -version",
    "Print Java version which is present on the brick.")
